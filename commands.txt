git add .

git status 

git commit -m "Commit message" -m "Commit description"

git push origin main

git checkout -b feature-11-readme-instructions # create new branch called feature- issue number 11 - more description

git branch # shows all branches and highlight the branch I am working in

git checkout main change between branches

git log -p README.md
gitk --follow README.md
if you use git checkout and switch a branch, you can see differences in branches

git diff feature-readme-instruction # Do this from main branch. Will only show commited changes (I think) as it is impossible to switch between branches with uncommited changes

git merge feature-readme-instruction # Do this from main branch, but not common

git push --set-upstream origin feature-readme-instruction
or
git push -u origin feature-readme-instruction
then we need to make a pull request, to pull feature branch into main branch. this allows for code review. new changes can still be commited to feature branch.
once you are done merging, you generally delete feature branch and switch to master branch. then create a new branch to make further changes.
Pull requests can be done in git or on github. github has a feature to add comments to specific lines of code.
we then switch to the main branch and then perform 
git pull origin main
git branch -d feature-readme-instruction #then delete branch

merging is not always this easy. multiple branches may exist. you may be working on a branch, and main may have commited changes. sometimes git doesn't
know what code to keep and what code to remove.

git checkout -b quick-test
change index.html in quick-test branch
git commit -am "added world" # add and commit, only works for modified files
git checkout main
change index.html in main branch
what happens if we merge the two branches? which line will be commited and which will be removed?
git checkout quick-test # error: Your local changes to the following files would be overwritten by checkout: index.html. Please commit your changes or stash them before you switch branches.
Aborting
git commit -am "added there"
git checkout quick-test # now works
git diff main
	diff --git a/index.html b/index.html
	index d4cddce..d7ea4af 100644
	--- a/index.html
	+++ b/index.html
	@@ -1,2 +1,2 @@
	 <div>Hello</div>
	-<p>there</p>
	\ No newline at end of file
	+<p>world</p>
	\ No newline at end of file
git merge master # now preferable because main has been changed while working on quick-test branch. we dont want to get too far behind of main. we want to pull changes in main towards local branch.
	Auto-merging index.html
	CONFLICT (content): Merge conflict in index.html
	Automatic merge failed; fix conflicts and then commit the result.
accept both changes. we now need to make another commit because we have fixed merge conflicts.
git commit -am "updated with master" # i can now keep doing changes in my new branch. 
quick-test branch will contain both "hello" and "there", but main branch will still be missing the "there", since quick-test branch has not been pulled into main branch.


# What if we make changes we wish to undo?
add 2. Have fun in index.html
git status # Readme is not staged
git add README.md
git status # README is staged
git reset README.md # will unstage README.md
git status # Readme is no longer staged
# What about undoing commits?
git add README.md
git commit -m "added install step" #changes commited
git reset HEAD~1 # HEAD is a pointer to last commit, go back one commit further
git status # README is uncommited and unstaged
git diff # git will pickup the 2. Have fun. as a new change
# If you have many commits, you might want to go back several commits, or undo many commits. This is difficult.
git log # reversed chronological order of commits
# commits are differentiated with hashes
git reset #hash"
git reset --hard "hash" # unstages changes and COMPLETELY removes changes from local files



# Forking - make a copy of repo of someone elses repo. allows you to work on it as if it is your own personal repo. you also fork over all historic commits and branches.
# you can then pull request your forked repo into main repo.

Faraday academy!